#include "tlpp-core.th"

#define _dbDrive		'SQLITE_SYS'
#define	_AliasUSR		"USERS"

static __nAlias  := 1


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestgenerateTables

@description
Main function para gerar base e popular tabela de usuï¿½rios para exercï¿½cio
utilizado no Workshop

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@return  Nil
/*/
//-------------------------------------------------------------------
main function sampleCRUDtlppRestgenerateTables()

	local aDbTbl 		:= {}
	local cAliasTbl		:= ''
	local cAlias		:= ''

	conout( '', '' )
	conout( '---------' )
	conout( 'TLPP REST' )
	conout( '---------' )
	conout( '' )
	conout( date(), time() )
	conout( '' )
	conout( '... starting tables for workshop' )
	conout( '' )

	aDbTbl 		:=	{ 									;
						{ 'ID'			, 'C', 20	,0}	,;
						{ 'NAME'		, 'C', 150	,0}	,;
						{ 'NICKNAME'	, 'C', 50	,0} ,;
						{ 'USER'		, 'C', 150	,0}	,;
						{ 'PASSWORD'	, 'C', 150	,0}	;
					}
	cAliasTbl := _AliasUSR
	dbCreate( cAliasTbl, aDbTbl, _dbDrive )

	// Cria indice de busca
		cAlias := NextAlias()
		dbUseArea( .F., _dbDrive, _AliasUSR, (cAlias), .F., .F. )
			(cAlias)->( dbCreateIndex(_AliasUSR+'01', 'ID'  , { || 'ID'   }, .T. ) )
			(cAlias)->( dbCreateIndex(_AliasUSR+'02', 'USER', { || 'USER' }, .T. ) )
		(cAlias)->( dbCloseArea() )
	aDbTbl 		:= {}
	cAliasTbl	:= ''
	conout( '... table [' + _AliasUSR +'] created' )
	conout( '' )

	initUsers()
	conout( '... table [' + _AliasUSR +'] initialized' )
	conout( '' )

	conout( '... end process for workshop' )
return


//-------------------------------------------------------------------
/*/{tlpp.doc} initUsers

@description
popula tabela de usuï¿½rios

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@return  Nil
/*/
//-------------------------------------------------------------------
static function initUsers()

	local cAlias	:= NextAlias()
	local nOrder	:= 0
	local cID		:= ''
	local aUsers	:= {}
	local nA		:= 0

	// lista de usuarios iniciais
		aadd( aUsers, {'Joao dos Santos','joaozinho','joao' ,'senha@123'} )
		aadd( aUsers, {'Maria Silva'    ,'marie'	,'maria','senha@123'} )
		aadd( aUsers, {'Jose Goncalves' ,'ze'		,'jose' ,'senha@123'} )
		aadd( aUsers, {'Julia Esteves'  ,''			,'julia','senha@123'} )

	// Grava na tabela
		dbUseArea( .T., _dbDrive, _AliasUSR, cAlias, .T., .F. )
			dbSelectArea( cAlias )
			dbSetIndex( _AliasUSR+'01' )
			nOrder := OrdNumber( _AliasUSR+'01' )
			dbSetOrder(nOrder)

			for nA := 1 to len( aUsers )
				
				cID := DtoS( date() ) + strtran( time(), ':', "" ) + strzero(nA,3)
					if ( !dbSeek(cID) )

						dbAppend( .T. )
							( cAlias )->ID			:= cID
							( cAlias )->NAME		:= aUsers[nA][1]
							( cAlias )->NICKNAME	:= aUsers[nA][2]
							( cAlias )->USER		:= aUsers[nA][3]
							( cAlias )->PASSWORD	:= WebEncript( aUsers[nA][4], .T. )
						dbCommit()
						dbRUnLock( Recno() )

					endif

			next nA
		( cAlias )->( dbCloseArea() )
return


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestalteraUserByID

@description
Altera um usuï¿½rio com base no ID

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, ID
@param	 character, Nome
@param	 character, Apelido

@return  boolean, TRUE para aï¿½ï¿½o com sucesso
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestalteraUserByID( cID, cName, cNick )
	lOK := sampleCRUDtlppRestalteraUser( .T., cID, cName, cNick )
return lOK

//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestalteraUserByUser

@description
Altera um usuï¿½rio com base no Usuï¿½rio

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, Usuï¿½rio
@param	 character, Nome
@param	 character, Apelido

@return  boolean, TRUE para aï¿½ï¿½o com sucesso
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestalteraUserByUser( cUser, cName, cNick )
	lOK := sampleCRUDtlppRestalteraUser( .F., cUser, cName, cNick )
return lOK

//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestalteraUser

@description
Altera um usuï¿½rio

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 boolean  , TRUE indica que Key ï¿½ valor do ID, FALSE se refere ao usuï¿½rio
@param	 character, Key
@param	 character, Nome
@param	 character, Apelido

@return  boolean, TRUE para aï¿½ï¿½o com sucesso
/*/
//-------------------------------------------------------------------
static function sampleCRUDtlppRestalteraUser( lID, cKey, cName, cNick )
	local lOK		:= .F.
	local cQuery	:= ''
	local lParam	:= .F.

	if ( lID )
		cKey := padr( cKey, 20 )
	else
		cKey := padr( cKey, 150 )
	endif

	cQuery += 'update ' + _AliasUSR
	cQuery += ' set'
	if ( !empty(cName) )
		cQuery += " NAME = '" + padr( cName, 50 ) + "' "
		lParam := .T.
	endif
	if ( !empty(cNick) )
		if ( lParam )
			cQuery += " ,"
		endif
		cQuery += " NICKNAME = '" + padr( cNick, 50 ) + "' "
	endif
	cQuery += ' where '
	if ( lID )
		cQuery += " ID = '" + cKey + "'"
	else
		cQuery += " USER = '" + cKey + "'"
	endif
	cQuery += " ;"

	lOK := dbSqlExec( "", cQuery, _dbDrive )
return lOK


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestinsertUser

@description
Insere um usuï¿½rio na BD

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, UsuÃ¡rio
@param	 character, Senha
@param	 character, Nome
@param	 character, Apelido

@return  boolean, TRUE para aÃ§Ã£o com sucesso
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestinsertUser( cUser, cPass, cName, cNick )	
	local lOK 		:= .F.
	local cAlias	:= ''
	local cQuery	:= ''
	local lFound	:= .F.
	local cID		:= ''
	local nOrder	:= 0

	cAlias := NextAlias()
	cQuery := "select * from " + _AliasUSR
	cQuery += " where USER = '" + padr(cUser,150) + "';"
	conout(cAlias)
	conout(cQuery)
	dbSqlExec( cAlias, cQuery, _dbDrive )
	dbSelectArea( cAlias )
		lFound := (cAlias)->( !eof() )
	(cAlias)->( dbCloseArea() )

	if ( !lFound )

		cAlias := NextAlias()
		dbUseArea( .T., _dbDrive, _AliasUSR, cAlias, .T., .F. )
		dbSelectArea( cAlias )
		dbSetIndex( _AliasUSR+'01' )
		nOrder := OrdNumber( _AliasUSR+'01' )
		dbSetOrder(nOrder)

		cID := DtoS( date() ) + strtran( time(), ':', "" ) + CVALTOCHAR( ThreadID() )
			if ( !dbSeek(cID) )

				dbAppend( .T. )
					( cAlias )->ID			:= cID
					( cAlias )->NAME		:= cName
					( cAlias )->NICKNAME	:= cNick
					( cAlias )->USER		:= cUser
					( cAlias )->PASSWORD	:= WebEncript( cPass, .T. )
				dbCommit()
				dbRUnLock( Recno() )

				lOK := .T.
			else
				lOK := .F.
				conout('invalid ID')
			endif
	else
		lOK := .F.
		conout('user already exists')
	endif

return  lOK


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestgetUser

@description
Retorna dados de um usuï¿½rio

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, Usuï¿½rio

@return  array, Dados do usuï¿½rio
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestgetUser( cUser )

	local aUser		:= {}
	local cAlias	:= ''
	local cQuery	:= ''

	cAlias := NextAlias()
	cQuery := "select * from " + _AliasUSR
	cQuery += " where USER = '" + padr(cUser,150) + "';"
	dbSqlExec( cAlias, cQuery, _dbDrive )
	dbSelectArea( cAlias )

		if ( (cAlias)->( !eof() ) )
			aadd( aUser, alltrim( (cAlias)->ID )		)
			aadd( aUser, alltrim( (cAlias)->NAME )		)
			aadd( aUser, alltrim( (cAlias)->NICKNAME )	)
			aadd( aUser, alltrim( (cAlias)->USER )		)
		endif

	(cAlias)->( dbCloseArea() )

return aUser


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestdeleteUser

@description
Deleta usuï¿½rio da base de dados

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, Usuï¿½rio

@return  boolean, TRUE para aï¿½ï¿½o com sucesso
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestdeleteUser( cUser )

	local lOK 		:= .F.
	local cAlias	:= ''
	local cQuery	:= ''
	local lFound	:= .F.
	local cID		:= ''

	cAlias := NextAlias()
	cQuery := "select * from " + _AliasUSR
	cQuery += " where USER = '" + padr(cUser,150) + "';"

	dbSqlExec( cAlias, cQuery, _dbDrive )
	dbSelectArea( cAlias )
		lFound 	:= (cAlias)->( !eof() )
		cID		:= (cAlias)->ID
	(cAlias)->( dbCloseArea() )

	if ( lFound )

		cQuery += 'delete from ' + _AliasUSR
		cQuery += " where ID = '" + cID + "';"

		lOK := dbSqlExec( "", cQuery, _dbDrive )

	else
		lOK := .F.
		conout('user not found')
	endif

return lOK


//-------------------------------------------------------------------
/*/{tlpp.doc} sampleCRUDtlppRestUserLogin

@description
Verifica usuário e senha na tabela USERS para verificar se tem acesso

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@param	 character, Usuï¿½rio
@param	 character, Senha

@return  boolean, TRUE para dados de usuï¿½rio e senha corretos
/*/
//-------------------------------------------------------------------
function sampleCRUDtlppRestUserValid( cUser, cPass )

	local lLogon := .F.
	local cAlias	:= ''
	local cQuery	:= ''
	local lFound	:= .F.

	cAlias := NextAlias()
	cQuery := "select * from " + _AliasUSR
	cQuery += " where USER = '" + padr(cUser,150) + "';"

	dbSqlExec( cAlias, cQuery, _dbDrive )
	dbSelectArea( cAlias )
		if ( lFound := (cAlias)->( !eof() ) )
			cPassBD	:= (cAlias)->PASSWORD
		endif
	(cAlias)->( dbCloseArea() )

	if ( lFound )
		if ( !(lLogon := (cPass == WebEncript( alltrim(cPassBD), .F. ))) )
			conout('invalid password')
		endif
	else
		lLogon := .F.
		conout('invalid user')
	endif

return lLogon


//-------------------------------------------------------------------
/*/{tlpp.doc} NextAlias

@description
Retorna proximo nome de Alias para ser usado no acesso ao BD

@type    function

@author  TOTVS-TEC-TLPP
@since   06/2019
@version 1.0

@return  charactere, Nome do aliasss
/*/
//-------------------------------------------------------------------
static function NextAlias()
	local cRet := "SCGN" + strzero(__nAlias,6,0)
	__nAlias++
	if ( __nAlias > 999999 )
		__nAlias := 1
	endif
return cRet